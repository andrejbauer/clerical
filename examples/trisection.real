(* We demonstrate zero-finding with trisection. Because we cannot pass a function as an
   argument, we define below a function f, and then use it in find_zero to get a root. *)

(* You can load this file into toplevel with the load directive, and then play with it.
   Example interaction:

   $ ./clerical.native -l examples/trisection.real
   Clerical 
   # do trisect(0.0, 2.0)
   [1.25488,1.27097] : real
   # precision 20
   Output precision set to 20
   # do let x = trisect(0.0, 2.0) in x *. x *. x
   [1.999999801393757395,2.000000369092629779] : real
*)

function real f(real x):
  x *. x *. x -. 2.0

(* Find a zero of f on interval [a,b], assuming f is negative at a,
   positive at b, and monotone.

   Points of interest: 
   1. We compute an *exact* solution.
   2. We use trisection (not bisection) so that we never get stuck.
      (We could get stuck with bijection if the mid-point accidentally hits zero.
*)
qfunction real trisect(real a, real b):
  lim n =>
     (* We need to produce a real within 2⁻ⁿ of the zero. *)
     let ε = 1.0 /. real(shift(1, n)) in  (* ε = 2⁻ⁿ *)
     var left := a in
     var right := b in
     var must_go_on := true in
       while must_go_on do
          let x = (2.0 *. left +. right) /. 3.0
          and y = (left +. 2.0 *. right) /. 3.0 in
          let u = f(x) and v = f(y) in
          case
          | f(x) <. 0.0 => left := x
          | f(y) >. 0.0 => right := y
          end ;
          case
          | right -. left <. ε        => must_go_on := false
          | right -. left >. 0.5 *. ε => skip
          end
       end ;
       (left +. right) *. 0.5
